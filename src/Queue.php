<?php

namespace JdmmSwoft\Mqtt;

use Jdmm\Mqtt\Data\BaseEvent;
use Jdmm\Mqtt\Concern\BaseQueue;
use Jdmm\Mqtt\Contract\IEvent;
use Jdmm\Mqtt\Data\BaseData;
use Swoft\Bean\Annotation\Mapping\Bean;
use Swoft\Bean\Annotation\Mapping\Inject;

/**
 * Class Queue
 *
 * @Bean(name="mqttQueue", scope=Bean::SINGLETON)
 *
 * @package Jdmm\Mqtt
 *
 * method publish(BaseEvent $param)
 * @method startListen()
 */
class Queue extends BaseQueue
{
    /**
     * @var MessageHandler
     * @Inject()
     */
    private $messageHandler;

    /**
     * @var \JdmmSwoft\Mqtt\Engine\Queue
     * @Inject()
     */
    private $engine;

    public function init() {
        /*if(!isset($this->options['appName'])) {
            //验证config/base是否设置
            $name = config('name');
            if(!$name) {
                throw new \Exception('config/base `name` is not set');
            }
            $this->options['appName'] = $name;
        }*/
        if (!isset($this->eventBus)) {
            $this->eventBus = \bean($this->type);
        }

        //注入消息处理类
        $this->eventBus->setMessageHandler($this->messageHandler);
    }

    public function __call($name, $arguments)
    {
        return parent::__call($name, $arguments); // TODO: Change the autogenerated stub
    }

    //推送消息
    public function publish(BaseEvent $event) {
        if ($this->eventBus->getOptions() == null) {
            $this->eventBus->setOptions($this->options);
        }

        $eventName = $event->commonKey('_name');
        if(!$eventName) {
            $eventName = $event::EVENT_NAME;
        }
        if(!$eventName) {
            throw new \Exception('请设置事件名称');
        }
        $baseEvent = new BaseData($eventName);
        $baseEvent->setPayload($event);

        $key = $event->commonKey('_key');
        if($key) {
            $baseEvent->setKey($key);
        }

        $conf = GlobalClass::setConf();

        $clientId = $event->commonKey('_clientID');
        if($clientId) {
            $conf['clientID'] = $clientId;
        }
        // Event::publishBefore($baseEvent);
        $res = $this->engine->publish($baseEvent, $this->eventBus,$conf);
        // Event::publishAfter($baseEvent);
        return $res;
    }


}
